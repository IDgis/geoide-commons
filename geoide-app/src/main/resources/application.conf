geoide.service {
	akka {
		io.tcp.windows-connection-abort-workaround-enabled = false
	
		actor {
			provider = "akka.remote.RemoteActorRefProvider"
			
			serializers {
				streams = "nl.idgis.geoide.util.akka.serializers.StreamSerializer"
				bytestring = "nl.idgis.geoide.util.akka.serializers.ByteStringSerializer"
			}
			
			serialization-bindings {
				"nl.idgis.geoide.util.streams.AkkaSerializablePublisher" = streams
				"nl.idgis.geoide.util.streams.AkkaSerializableSubscriber" = streams
				"akka.util.ByteString" = bytestring
			}
		}

		remote {
			enabled-transports = ["akka.remote.netty.tcp"]
			netty.tcp {
				hostname = "127.0.0.1"
				port = 2552
			}
		}
		
		loggers = ["akka.event.slf4j.Slf4jLogger"]		
		loglevel = "DEBUG"		
	}
	
	components {
	
		wsClient {
			
		}
		
		httpClient {
			streamBlockSizeInBytes = 2048
			streamTimeoutInMillis = 30000l
		}
		
		print {
			templatepath = "C:/Temp"
			cacheName = "geoide-print"
			cacheTtlInSeconds = 300
			maxThreads = 2
			cacheTimeoutInMillis = 30000
			streamBlockSize = 102400
		}
		
		mapProvider {
			resources.maps = "nl/idgis/geoide/commons/config/map/maps.json"
			resources.services = "nl/idgis/geoide/commons/config/map/services.json"
			resources.featureTypes = "nl/idgis/geoide/commons/config/map/featuretypes.json"
			resources.serviceLayers = "nl/idgis/geoide/commons/config/map/servicelayers.json"
			resources.layers = "nl/idgis/geoide/commons/config/map/layers.json"
		}
		
		remoteMethodServer {
			actorName = "remote-method-server"
			timeoutInMillis = 10000
			apiServerName = "api"
		}
	}
}